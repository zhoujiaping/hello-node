async和await，是在语言层面解决异步编程可读性问题。
await后面跟着一个promise实例。
可以这么理解，代码仍然是异步执行，相当于 获取await的返回值的代码及其后面的代码，是在promise的then方法里面的。
async function do(req,res,next){
	const {rows} = await query(arg1,arg2);
	res.send(rows[0]);
}
相当于
function do(req,res,next){
	query(arg1,arg2).then(({rows})=>{
		res.send(rows[0]);
	});
}
相当于
function do(req,res,next){
	query(arg1,arg2,({rows})=>{
		res.send(rows[0]);
	});
}
相当于使用第三方库co
let co = require("co");
co(function *(){
    try{
        const {rows} = yield query(arg1,arg2);
        res.send(rows[0]);
    }catch(e){
        console.error(e.message);
    }
});
这里暂时不考虑异常处理

如果是连续的await
await dosth1();
await dosth2();
相当于
dosth1().then(res1=>{
	dosth2().then(res2=>{
		...
	});
});
在需要使用
promise.all(pro1,pro2,(res1,res2)=>{
	..
});
时，就需要用
async ()=>{
	await promise.all(pro1,pro2);
}
